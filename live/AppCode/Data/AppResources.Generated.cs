// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppResources.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppResources
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.04.01
// App/Edition: Mobius Forms 6/staging
// User:        2sic Web-Developer
// When:        2024-03-18 14:34:38Z
using System.Collections.Generic;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for AppResources (scope: System.App)
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppResources data. <br/>
  /// Generated 2024-03-18 14:34:38Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.DefaultFormResources`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  /// <remarks>
  /// This Content-Type is NOT in the default scope, so you may not see it in the Admin UI. It's in the scope System.App.
  /// </remarks>
  public partial class AppResources: AutoGenerated.ZagAppResources
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for System.App.AppResources in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagAppResources: Custom.Data.CustomItem
  {
    /// <summary>
    /// DefaultFormResources as single item of FormResources.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type FormResources was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public FormResources DefaultFormResources => _defaultFormResources ??= _item.Child<FormResources>("DefaultFormResources");
    private FormResources _defaultFormResources;

    /// <summary>
    /// DefaultSendMailConfig as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem DefaultSendMailConfig => _defaultSendMailConfig ??= _item.Child("DefaultSendMailConfig");
    private ITypedItem _defaultSendMailConfig;

    /// <summary>
    /// LabelFirst as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelFirst", scrubHtml: true) etc.
    /// </summary>
    public string LabelFirst => _item.String("LabelFirst", fallback: "");

    /// <summary>
    /// LabelFromDataAvailable as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelFromDataAvailable", scrubHtml: true) etc.
    /// </summary>
    public string LabelFromDataAvailable => _item.String("LabelFromDataAvailable", fallback: "");

    /// <summary>
    /// LabelLast as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelLast", scrubHtml: true) etc.
    /// </summary>
    public string LabelLast => _item.String("LabelLast", fallback: "");

    /// <summary>
    /// LabelRecaptcha as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelRecaptcha", scrubHtml: true) etc.
    /// </summary>
    public string LabelRecaptcha => _item.String("LabelRecaptcha", fallback: "");

    /// <summary>
    /// LabelTimestamp as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelTimestamp", scrubHtml: true) etc.
    /// </summary>
    public string LabelTimestamp => _item.String("LabelTimestamp", fallback: "");

    /// <summary>
    /// MessageContainsMailChimp as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageContainsMailChimp", scrubHtml: true) etc.
    /// </summary>
    public string MessageContainsMailChimp => _item.String("MessageContainsMailChimp", fallback: "");

    /// <summary>
    /// MessageContainsRecaptcha as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageContainsRecaptcha", scrubHtml: true) etc.
    /// </summary>
    public string MessageContainsRecaptcha => _item.String("MessageContainsRecaptcha", fallback: "");

    /// <summary>
    /// MessageDefaultMailChimpKey as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageDefaultMailChimpKey", scrubHtml: true) etc.
    /// </summary>
    public string MessageDefaultMailChimpKey => _item.String("MessageDefaultMailChimpKey", fallback: "");

    /// <summary>
    /// MessageDemoItem as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageDemoItem", scrubHtml: true) etc.
    /// </summary>
    public string MessageDemoItem => _item.String("MessageDemoItem", fallback: "");

    /// <summary>
    /// MessageEnableMailchimp as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageEnableMailchimp", scrubHtml: true) etc.
    /// </summary>
    public string MessageEnableMailchimp => _item.String("MessageEnableMailchimp", fallback: "");

    /// <summary>
    /// MessageRecaptchaMissing as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageRecaptchaMissing", scrubHtml: true) etc.
    /// </summary>
    public string MessageRecaptchaMissing => _item.String("MessageRecaptchaMissing", fallback: "");

    /// <summary>
    /// MessageRecaptchaWarning as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageRecaptchaWarning", scrubHtml: true) etc.
    /// </summary>
    public string MessageRecaptchaWarning => _item.String("MessageRecaptchaWarning", fallback: "");

    /// <summary>
    /// NoFieldsInfo as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("NoFieldsInfo", scrubHtml: true) etc.
    /// </summary>
    public string NoFieldsInfo => _item.String("NoFieldsInfo", fallback: "");

    /// <summary>
    /// ToolbarAppResources as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ToolbarAppResources", scrubHtml: true) etc.
    /// </summary>
    public string ToolbarAppResources => _item.String("ToolbarAppResources", fallback: "");

    /// <summary>
    /// ToolbarConfigure as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ToolbarConfigure", scrubHtml: true) etc.
    /// </summary>
    public string ToolbarConfigure => _item.String("ToolbarConfigure", fallback: "");

    /// <summary>
    /// ToolbarPermissionInfo as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ToolbarPermissionInfo", scrubHtml: true) etc.
    /// </summary>
    public string ToolbarPermissionInfo => _item.String("ToolbarPermissionInfo", fallback: "");

    /// <summary>
    /// ToolbarReuseInfo as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ToolbarReuseInfo", scrubHtml: true) etc.
    /// </summary>
    public string ToolbarReuseInfo => _item.String("ToolbarReuseInfo", fallback: "");

    /// <summary>
    /// ToolbarViewData as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ToolbarViewData", scrubHtml: true) etc.
    /// </summary>
    public string ToolbarViewData => _item.String("ToolbarViewData", fallback: "");
  }
}