// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "FormFieldConfig.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class FormFieldConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.04.01
// App/Edition: Mobius Forms 6/staging
// User:        2sic Web-Developer
// When:        2024-03-18 14:34:38Z
namespace AppCode.Data
{
  // This is a generated class for FormFieldConfig 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormFieldConfig data. <br/>
  /// Generated 2024-03-18 14:34:38Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.AcceptedExtensions`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class FormFieldConfig: AutoGenerated.ZagFormFieldConfig
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.FormFieldConfig in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagFormFieldConfig: Custom.Data.CustomItem
  {
    /// <summary>
    /// AcceptedExtensions as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("AcceptedExtensions", scrubHtml: true) etc.
    /// </summary>
    public string AcceptedExtensions => _item.String("AcceptedExtensions", fallback: "");

    /// <summary>
    /// BooleanLabelRight as bool. <br/>
    /// To get nullable use .Get("BooleanLabelRight") as bool?;
    /// </summary>
    public bool BooleanLabelRight => _item.Bool("BooleanLabelRight");

    /// <summary>
    /// DefaultValue as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("DefaultValue", scrubHtml: true) etc.
    /// </summary>
    public string DefaultValue => _item.String("DefaultValue", fallback: "");

    /// <summary>
    /// EmailUseAsRecipient as bool. <br/>
    /// To get nullable use .Get("EmailUseAsRecipient") as bool?;
    /// </summary>
    public bool EmailUseAsRecipient => _item.Bool("EmailUseAsRecipient");

    /// <summary>
    /// FieldId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FieldId", scrubHtml: true) etc.
    /// </summary>
    public string FieldId => _item.String("FieldId", fallback: "");

    /// <summary>
    /// FieldType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FieldType", scrubHtml: true) etc.
    /// </summary>
    public string FieldType => _item.String("FieldType", fallback: "");

    /// <summary>
    /// GdprEnabled as bool. <br/>
    /// To get nullable use .Get("GdprEnabled") as bool?;
    /// </summary>
    public bool GdprEnabled => _item.Bool("GdprEnabled");

    /// <summary>
    /// InfoText as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("InfoText", scrubHtml: true) etc.
    /// </summary>
    public string InfoText => _item.String("InfoText", fallback: "");

    /// <summary>
    /// IsDisabled as bool. <br/>
    /// To get nullable use .Get("IsDisabled") as bool?;
    /// </summary>
    public bool IsDisabled => _item.Bool("IsDisabled");

    /// <summary>
    /// LabelStartsNewGroup as bool. <br/>
    /// To get nullable use .Get("LabelStartsNewGroup") as bool?;
    /// </summary>
    public bool LabelStartsNewGroup => _item.Bool("LabelStartsNewGroup");

    /// <summary>
    /// NumberMax as int. <br/>
    /// To get other types use methods such as .Decimal("NumberMax")
    /// </summary>
    public int NumberMax => _item.Int("NumberMax");

    /// <summary>
    /// NumberMin as int. <br/>
    /// To get other types use methods such as .Decimal("NumberMin")
    /// </summary>
    public int NumberMin => _item.Int("NumberMin");

    /// <summary>
    /// PickerCheckboxGrouped as bool. <br/>
    /// To get nullable use .Get("PickerCheckboxGrouped") as bool?;
    /// </summary>
    public bool PickerCheckboxGrouped => _item.Bool("PickerCheckboxGrouped");

    /// <summary>
    /// PickerKeyValues as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerKeyValues", scrubHtml: true) etc.
    /// </summary>
    public string PickerKeyValues => _item.String("PickerKeyValues", fallback: "");

    /// <summary>
    /// PickerMultiSelect as bool. <br/>
    /// To get nullable use .Get("PickerMultiSelect") as bool?;
    /// </summary>
    public bool PickerMultiSelect => _item.Bool("PickerMultiSelect");

    /// <summary>
    /// PickerPlaceholder as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerPlaceholder", scrubHtml: true) etc.
    /// </summary>
    public string PickerPlaceholder => _item.String("PickerPlaceholder", fallback: "");

    /// <summary>
    /// PickerType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerType", scrubHtml: true) etc.
    /// </summary>
    public string PickerType => _item.String("PickerType", fallback: "");

    /// <summary>
    /// RazorFile as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("RazorFile", scrubHtml: true) etc.
    /// </summary>
    public string RazorFile => _item.String("RazorFile", fallback: "");

    /// <summary>
    /// Required as bool. <br/>
    /// To get nullable use .Get("Required") as bool?;
    /// </summary>
    public bool Required => _item.Bool("Required");

    /// <summary>
    /// StringLines as int. <br/>
    /// To get other types use methods such as .Decimal("StringLines")
    /// </summary>
    public int StringLines => _item.Int("StringLines");

    /// <summary>
    /// TermsAndGdprCombined as bool. <br/>
    /// To get nullable use .Get("TermsAndGdprCombined") as bool?;
    /// </summary>
    public bool TermsAndGdprCombined => _item.Bool("TermsAndGdprCombined");

    /// <summary>
    /// TermsEnabled as bool. <br/>
    /// To get nullable use .Get("TermsEnabled") as bool?;
    /// </summary>
    public bool TermsEnabled => _item.Bool("TermsEnabled");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}