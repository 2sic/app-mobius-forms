// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormFieldConfig.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class FormFieldConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   DataModelGenerator v17.01.08
// App/Edition: Mobius Forms 6/staging
// User:        2sic Web-Developer
// When:        2024-02-16 18:53:14Z
namespace AppCode.Data
{
  // This is a generated class for FormFieldConfig
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormFieldConfig data. <br/>
  /// Generated 2024-02-16 18:53:14Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.BooleanLabelRight`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class FormFieldConfig: FormFieldConfigAutoGenerated
  {  }

  /// <summary>
  /// Auto-Generated base class for FormFieldConfig.
  /// </summary>
  public abstract class FormFieldConfigAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// BooleanLabelRight as bool. <br/>
    /// To get nullable use .Get("BooleanLabelRight") as bool?;
    /// </summary>
    public bool BooleanLabelRight => Bool("BooleanLabelRight");

    /// <summary>
    /// DefaultValue as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("DefaultValue", scrubHtml: true) etc.
    /// </summary>
    public string DefaultValue => String("DefaultValue", fallback: "");

    /// <summary>
    /// EmailUseAsRecipient as bool. <br/>
    /// To get nullable use .Get("EmailUseAsRecipient") as bool?;
    /// </summary>
    public bool EmailUseAsRecipient => Bool("EmailUseAsRecipient");

    /// <summary>
    /// FieldId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FieldId", scrubHtml: true) etc.
    /// </summary>
    public string FieldId => String("FieldId", fallback: "");

    /// <summary>
    /// FieldType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FieldType", scrubHtml: true) etc.
    /// </summary>
    public string FieldType => String("FieldType", fallback: "");

    /// <summary>
    /// GdprEnabled as bool. <br/>
    /// To get nullable use .Get("GdprEnabled") as bool?;
    /// </summary>
    public bool GdprEnabled => Bool("GdprEnabled");

    /// <summary>
    /// IsDisabled as bool. <br/>
    /// To get nullable use .Get("IsDisabled") as bool?;
    /// </summary>
    public bool IsDisabled => Bool("IsDisabled");

    /// <summary>
    /// LabelStartsNewGroup as bool. <br/>
    /// To get nullable use .Get("LabelStartsNewGroup") as bool?;
    /// </summary>
    public bool LabelStartsNewGroup => Bool("LabelStartsNewGroup");

    /// <summary>
    /// NumberMax as int. <br/>
    /// To get other types use methods such as .Decimal("NumberMax")
    /// </summary>
    public int NumberMax => Int("NumberMax");

    /// <summary>
    /// NumberMin as int. <br/>
    /// To get other types use methods such as .Decimal("NumberMin")
    /// </summary>
    public int NumberMin => Int("NumberMin");

    /// <summary>
    /// PickerCheckboxGrouped as bool. <br/>
    /// To get nullable use .Get("PickerCheckboxGrouped") as bool?;
    /// </summary>
    public bool PickerCheckboxGrouped => Bool("PickerCheckboxGrouped");

    /// <summary>
    /// PickerKeyValues as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerKeyValues", scrubHtml: true) etc.
    /// </summary>
    public string PickerKeyValues => String("PickerKeyValues", fallback: "");

    /// <summary>
    /// PickerMultiSelect as bool. <br/>
    /// To get nullable use .Get("PickerMultiSelect") as bool?;
    /// </summary>
    public bool PickerMultiSelect => Bool("PickerMultiSelect");

    /// <summary>
    /// PickerPlaceholder as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerPlaceholder", scrubHtml: true) etc.
    /// </summary>
    public string PickerPlaceholder => String("PickerPlaceholder", fallback: "");

    /// <summary>
    /// PickerType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PickerType", scrubHtml: true) etc.
    /// </summary>
    public string PickerType => String("PickerType", fallback: "");

    /// <summary>
    /// RazorFile as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("RazorFile", scrubHtml: true) etc.
    /// </summary>
    public string RazorFile => String("RazorFile", fallback: "");

    /// <summary>
    /// Required as bool. <br/>
    /// To get nullable use .Get("Required") as bool?;
    /// </summary>
    public bool Required => Bool("Required");

    /// <summary>
    /// StringLines as int. <br/>
    /// To get other types use methods such as .Decimal("StringLines")
    /// </summary>
    public int StringLines => Int("StringLines");

    /// <summary>
    /// TermsAndGdprCombined as bool. <br/>
    /// To get nullable use .Get("TermsAndGdprCombined") as bool?;
    /// </summary>
    public bool TermsAndGdprCombined => Bool("TermsAndGdprCombined");

    /// <summary>
    /// TermsEnabled as bool. <br/>
    /// To get nullable use .Get("TermsEnabled") as bool?;
    /// </summary>
    public bool TermsEnabled => Bool("TermsEnabled");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public string Title => String("Title", fallback: "");
  }
}