// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "FormResources.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class FormResources
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.04.01
// App/Edition: Mobius Forms 6/staging
// User:        2sic Web-Developer
// When:        2024-03-18 14:34:38Z
namespace AppCode.Data
{
  // This is a generated class for FormResources 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormResources data. <br/>
  /// Generated 2024-03-18 14:34:38Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Button`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class FormResources: AutoGenerated.ZagFormResources
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.FormResources in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagFormResources: Custom.Data.CustomItem
  {
    /// <summary>
    /// Button as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Button", scrubHtml: true) etc.
    /// </summary>
    public string Button => _item.String("Button", fallback: "");

    /// <summary>
    /// ButtonNextStep as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ButtonNextStep", scrubHtml: true) etc.
    /// </summary>
    public string ButtonNextStep => _item.String("ButtonNextStep", fallback: "");

    /// <summary>
    /// CustomerMailSubject as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("CustomerMailSubject", scrubHtml: true) etc.
    /// </summary>
    public string CustomerMailSubject => _item.String("CustomerMailSubject", fallback: "");

    /// <summary>
    /// LabelGdpr as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelGdpr", scrubHtml: true) etc.
    /// </summary>
    public string LabelGdpr => _item.String("LabelGdpr", fallback: "");

    /// <summary>
    /// LabelRequired as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelRequired", scrubHtml: true) etc.
    /// </summary>
    public string LabelRequired => _item.String("LabelRequired", fallback: "");

    /// <summary>
    /// LabelSelect as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelSelect", scrubHtml: true) etc.
    /// </summary>
    public string LabelSelect => _item.String("LabelSelect", fallback: "");

    /// <summary>
    /// LabelTerms as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelTerms", scrubHtml: true) etc.
    /// </summary>
    public string LabelTerms => _item.String("LabelTerms", fallback: "");

    /// <summary>
    /// LabelTermsAll as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelTermsAll", scrubHtml: true) etc.
    /// </summary>
    public string LabelTermsAll => _item.String("LabelTermsAll", fallback: "");

    /// <summary>
    /// LabelValidEmail as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelValidEmail", scrubHtml: true) etc.
    /// </summary>
    public string LabelValidEmail => _item.String("LabelValidEmail", fallback: "");

    /// <summary>
    /// LabelValidFile as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelValidFile", scrubHtml: true) etc.
    /// </summary>
    public string LabelValidFile => _item.String("LabelValidFile", fallback: "");

    /// <summary>
    /// MailBodyCustomer as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MailBodyCustomer", scrubHtml: true) etc.
    /// </summary>
    public string MailBodyCustomer => _item.String("MailBodyCustomer", fallback: "");

    /// <summary>
    /// MailBodyOwner as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MailBodyOwner", scrubHtml: true) etc.
    /// </summary>
    public string MailBodyOwner => _item.String("MailBodyOwner", fallback: "");

    /// <summary>
    /// MailCustomerContentWithData as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MailCustomerContentWithData", scrubHtml: true) etc.
    /// </summary>
    public string MailCustomerContentWithData => _item.String("MailCustomerContentWithData", fallback: "");

    /// <summary>
    /// MessageCustomerMailSend as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageCustomerMailSend", scrubHtml: true) etc.
    /// </summary>
    public string MessageCustomerMailSend => _item.String("MessageCustomerMailSend", fallback: "");

    /// <summary>
    /// MessageDisabledFeature as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageDisabledFeature", scrubHtml: true) etc.
    /// </summary>
    public string MessageDisabledFeature => _item.String("MessageDisabledFeature", fallback: "");

    /// <summary>
    /// MessageFormIncomplete as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageFormIncomplete", scrubHtml: true) etc.
    /// </summary>
    public string MessageFormIncomplete => _item.String("MessageFormIncomplete", fallback: "");

    /// <summary>
    /// MessageMailFromError as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageMailFromError", scrubHtml: true) etc.
    /// </summary>
    public string MessageMailFromError => _item.String("MessageMailFromError", fallback: "");

    /// <summary>
    /// MessageMailOwnerError as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageMailOwnerError", scrubHtml: true) etc.
    /// </summary>
    public string MessageMailOwnerError => _item.String("MessageMailOwnerError", fallback: "");

    /// <summary>
    /// MessageNewsletterSuccess as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageNewsletterSuccess", scrubHtml: true) etc.
    /// </summary>
    public string MessageNewsletterSuccess => _item.String("MessageNewsletterSuccess", fallback: "");

    /// <summary>
    /// MessageNewsletterUnexpectedError as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageNewsletterUnexpectedError", scrubHtml: true) etc.
    /// </summary>
    public string MessageNewsletterUnexpectedError => _item.String("MessageNewsletterUnexpectedError", fallback: "");

    /// <summary>
    /// MessageSendError as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageSendError", scrubHtml: true) etc.
    /// </summary>
    public string MessageSendError => _item.String("MessageSendError", fallback: "");

    /// <summary>
    /// MessageSending as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageSending", scrubHtml: true) etc.
    /// </summary>
    public string MessageSending => _item.String("MessageSending", fallback: "");

    /// <summary>
    /// MessageSendOk as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MessageSendOk", scrubHtml: true) etc.
    /// </summary>
    public string MessageSendOk => _item.String("MessageSendOk", fallback: "");

    /// <summary>
    /// OwnerMailSubject as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("OwnerMailSubject", scrubHtml: true) etc.
    /// </summary>
    public string OwnerMailSubject => _item.String("OwnerMailSubject", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}