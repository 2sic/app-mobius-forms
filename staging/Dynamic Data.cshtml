@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Data;
@{
  var data = AsItems(Kit.Data.GetQuery("DynamicData"));
  var helpers = GetCode("../staging/tools/DynData.cs");

  List<ITyped> jsonTyped = helpers.GetDataJsonTyped(data); // Initialize lists to store CSV-related data
  @* List<ITyped> jsonTyped = helpers.GetDataJsonTyped(); *@
    List<string> headerProps = helpers.CreateHeader(jsonTyped); // Create the Header with all specifications
    var moduleId = jsonTyped.First().Int("moduleId");
    var formId = jsonTyped.First().String("formId");
    var count = jsonTyped.Count();
    var firstRecord = jsonTyped.First().DateTime("Timestamp");
    var lastRecord = jsonTyped.Last().DateTime("Timestamp");

}

<div class="alert alert-primary" role="alert">
 <strong>ModuleId: </strong> @moduleId <strong>FormId:</strong> @formId <strong>Total:</strong> 
 @count <strong>First:</strong> @firstRecord.ToString("yyyy-MM-dd") <strong>Last:</strong> @lastRecord.ToString("yyyy-MM-dd")
</div>

<div class="overflow-x-auto">
   <table class="table">
    <thead>
      <tr>
        @foreach (var prop in headerProps) { // Generate the Tabele Header form headerPropsDistinct
          <th>@prop</th>
        }
      </tr>
    </thead>
    <tbody>
      @foreach (var fields in jsonTyped) // Loop each data from Query for the Value
      {
         <tr>
          @foreach (var prop in headerProps) // Loop each prop from headerProps, if the prop not use, will be generate a empty td (prop generate later)
          {
            <td>
              @if (fields.Get(prop, required: false) != null) //  Check, witch Type it is, an display the rigth Format 
              {
                switch (Type.GetTypeCode(fields.Get(prop).GetType()))
                {
                  case TypeCode.String:
                    <p>@fields.String(prop)</p>
                    break;
                  case TypeCode.Int32:
                    <p>@fields.Int(prop)</p>
                    break;
                  case TypeCode.DateTime:
                    <p>@fields.DateTime(prop).ToString("yyyy-MM-ddTHH:mm")</p>
                    break;
                  case TypeCode.Boolean:
                    <p>@fields.Bool(prop)</p>
                    break;
                  case TypeCode.Object:
                    var objValue = fields.Get(prop);

                    if (objValue != null)
                    {
                      if (objValue is IList<object> objectList)
                      {
                        foreach (var listItem in objectList)
                        {
                          @listItem
                        }
                      }
                      else
                      {
                        <p>Not from Typed List</p>
                      }
                    }
                    else
                    {
                    <td></td>
                    }
                    break;
                  default:
                  <td>Unknow Type</td>
                    break;
                }
              }
              else
              {
                // Get empty td
              }
            </td>
          }
        </tr> 
      }
    </tbody>
  </table> 

  <a href="@MyContext.Site.Url/api/2sxc/app/auto/@MyView.Edition/api/Csv/Csv?PageId=@MyContext.Page.Id&ModuleId=@MyContext.Module.Id&id=@moduleId" type="button" class="btn btn-primary">CSV Export</a>

</div>

@* TODO::  https://docs.2sxc.org/api/dot-net/ToSic.Sxc.Services.ILinkService.html#ToSic_Sxc_Services_ILinkService_To_System_String_System_Nullable_System_Int32__System_String_System_Object_System_String_System_String_ *@
 @* @{
    var linkToUrl = Link.To(pageId = @MyContext.Page.Id , api ="Csv/Csv", parameters = new {  ModuleId = @MyContext.Module.Id, id = moduleId });
}
@linkToUrl  *@
