@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Data
@using ThisApp.Data
@using ThisApp.Form
@using ThisApp

@{
  var dynForm = As<DynForm>(MyItem);
  var isReusedConfig = dynForm.ReuseConfig;

  // TODO: @2dg THIS looks fishy!
  // Why have a child, referencing itself in the "Config" field???
  // 
  var formConfig = isReusedConfig ? dynForm.Child("InheritedConfig").Child("Config") : dynForm.Child("Config");
  var dynFormConfig = As<DynForm>(formConfig);
  
  var formHelper = GetService<FormHelpers>();
  var dynDataHelper = GetCode("./tools/DynData.cs");

  var appRes = As<AppResources>(App.Resources);
  var appSetting = As<AppSettings>(App.Settings);

  var cssClasses = Kit.Css.Is("bs3") ? CssClasses.Bs3 : (Kit.Css.Is("bs4") ? CssClasses.Bs4 : CssClasses.Bs5); 
  var formParams = new FormBuildParameters(appRes, dynFormConfig, cssClasses , MyUser, dynForm.UseFloatingLabels);
  var formBuilder = GetService<FormBuilder>().Setup(formParams);

  bool enableEditExperience = appSetting.AdminHasPermission || MyContext.User.IsSystemAdmin;
  
  var formToolbar = enableEditExperience
    ? Kit.Toolbar.Default(dynForm)
    : Kit.Toolbar.Empty().Info(tweak: b => b.Note(appRes.ToolbarPermissionInfo));
}

<div class="app-mobius5-wrapper" @formToolbar>

  @if (Text.Has(dynForm.Title)) 
    <h2>@dynForm.Title</h2>   


  <div class="@formHelper.WrapperClasses(dynForm)" @formHelper.FormMobiusId()>
    <div class="app-mobius5-form">
      <input type="hidden" id="FormId" value="@dynForm.Id">

      @foreach (var field in dynForm.Fields)
      {        
        var toolbar = !enableEditExperience
          ? Kit.Toolbar.Empty().Info(tweak: b => b.Note(App.Resources.String("ToolbarPermissionInfo"))) 
          : isReusedConfig
            ? Kit.Toolbar.Empty().Info(tweak: b => b.Note(appRes.ToolbarReuseInfo, background: "white"))
            : Kit.Toolbar.Empty(field).Edit(tweak: b => b.Note("Field: " + field.Title)).MoveDown().New().Remove();

        <div @toolbar>
          @* If it's a advanced field, use the custom razor - otherwise use standard formBuilder *@
          @if (field.UseRazorComponent)
            @Html.Partial("./custom-fields/" + field.RazorFile, new { field })
          else
            @formBuilder.Field(field) 
        </div> 
      }
    </div>

    @dynForm.Mailchimp

    @if (dynForm.Recaptcha)
      @Html.Partial("./parts/Footer Recaptcha.cshtml") 
  
    @Html.Partial("./parts/Footer Submit with Messages.cshtml", new { formConfig })

    @if (MyUser.IsContentAdmin)
    {
      var query = Kit.Data.GetQuery("DynamicData", parameters: new { ModuleId = MyContext.Module.Id }); // Get the dynamic data from Query by ModuleId
      // Initialize lists to store CSV-related data
      List<(ITyped Json, ITypedItem Item)> dataPairs = dynDataHelper.PrepareData(query.List); // Initialize Data

      <div class="alert alert-warning d-flex align-items-center gap-3" role="alert">
        Admin Info: @dataPairs.Count()
        @if (dataPairs.Count() == 0) 
          @appRes.LabelFromDataAvailable
         else {
          <a class="btn btn-primary" href="@Link.To(parameters: "id=" + MyContext.Module.Id + "&mid=" + MyContext.Module.Id)" target="_blank">Form Data</a>
          <a class="btn btn-primary" href="@MyContext.Site.Url/api/2sxc/app/auto/@MyView.Edition/api/Csv/Csv?PageId=@MyContext.Page.Id&ModuleId=@MyContext.Module.Id&id=@MyContext.Module.Id" type="button">CSV Export</a>
        }
      </div>
    }
  </div>
</div>

@Html.Partial("./parts/Assets.cshtml", new { formConfig })