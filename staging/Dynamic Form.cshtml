@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Data
@using ThisApp.Code
@using ThisApp.Data
@{
  var dynForm = MyItem;
  var isReusedConfig = dynForm.Bool("ReuseConfig");
  var usePlaceholder = isReusedConfig ? dynForm.Child("InheritedConfig").String("DesignField") == "placeholder" : dynForm.String("DesignField") == "placeholder";
  
  var formConfig = isReusedConfig ? dynForm.Child("InheritedConfig").Child("Config") : dynForm.Child("Config");
  var formFields = isReusedConfig ? dynForm.Child("InheritedConfig").Children("Fields") : dynForm.Children("Fields");
  var formFieldsSets = formFields.Where(f => f.String("FieldType") == "label" && f.Bool("IsSet"));
  var hasSets = formFieldsSets.Count() > 0;
  var setIndex = 1;

  var FieldBuilder = GetCode("./tools/FieldBuilders.cs");
  FieldBuilder.LabelInPlaceholder = usePlaceholder;
  
  var formHelper = new FormHelpers(this);
  var dynDataHelper = GetCode("./tools/DynData.cs");

  // new
  var appRes = new AppResources(App.Resources);
  var dynFormConfig = new DynForm(formConfig);
  var formParams = new FormBuildParameters(appRes, dynFormConfig, Kit.Css.Is("bs3") ? CssClasses.Bs3 : CssClasses.Bs5);
  var formBuilder = new FormBuilder(this, formParams);
}

<div @Kit.Toolbar.Default(dynForm) class="app-mobius5-wrapper">

  @if (Text.Has(dynForm.String("Title"))) {
    <h2>@dynForm.String("Title")</h2>   
  }

  <div class="@formHelper.WrapperClasses(formConfig)" @formHelper.FormMobiusId()>
    <div class="app-mobius5-form">
      <input type="hidden" id="FormId" value="@dynForm.Id">

      @foreach (var field in formFields) {
        var dynField = new DynFormField(field);

        // Main Form Data
        var label = field.String("Title");
        var fieldId = field.Url("FieldId");
        var fieldType = field.String("FieldType");
        var required = field.Bool("Required");
        var pickerType = field.String("PickerType");
        
        var toolbar = isReusedConfig
          ? Kit.Toolbar.Empty().Info(tweak: b => b.Note(App.Resources.String("ToolbarReuseInfo"), background: "white"))
          : Kit.Toolbar.Empty(field).Edit(tweak: b => b.Note("Field: " + label)).MoveDown().New().Remove();


        @:<div class="@fieldType" @toolbar>
          if (hasSets && setIndex > 1) {
            @:<div class="set">
          }

          switch (fieldType) {
            // new
            case "string":
            case "number":
            case "email":
            case "boolean":
            case "terms":
              @formBuilder.Field(dynField)
              break;
            @* case "string":
              if (field.Int("StringLines") == 0) {
                @formBuilder.Field(dynField)
              } else {
                @FieldBuilder.Multiline(fieldId, label, required, false, "", field.Int("StringLines").ToString())
              }
              
              break; *@

            @* case "email": *@
              @* TODO: @2dg #1
                âœ… create DynFormField.RecipientMail
                - create BuildFieldEMail.cs  *@
              @* @FieldBuilder.EMail(fieldId, label, required, field.Bool("RecipientEmail"))
              break; *@
            
            @* case "number":
              @FieldBuilder.Number(fieldId, label, required, field.Int("MinLength"), field.Int("MaxLength"))
              break; *@
            
           @*  case "boolean":
              TODO: @2dg #2

                - DynFormField.LabelRight (what does it do?)
                - create BuildFieldCheckbox.cs
                - create ??? (discuss w/2dm, the name is not clear what it should do) 
                if (usePlaceholder) {
                <strong>@label</strong>
                 }
              if (field.Bool("LabelRight")){
                 @formBuilder.Field(dynField)
                @FieldBuilder.Checkbox(fieldId, required, false, label)
              } else {
        
                @FieldBuilder.CheckboxFieldAligment(fieldId, required, label)
              }
                 @formBuilder.Field(dynField)
               *@

              @* TODO: @2dg 
                - checkbox with Terms
                -  *@
              @* case "terms":
               var termsEnabled = field.Bool("TermsEnabled");
              var gdprEnabled = field.Bool("GdprEnabled");
              
              if (termsEnabled && gdprEnabled && field.Bool("TermsAndGdprCombined")) {
                @FieldBuilder.Checkbox("TermsAll", true, true)
              } else {
                if (termsEnabled) { @FieldBuilder.Checkbox("Terms", true, true) }
                if (gdprEnabled) { @FieldBuilder.Checkbox("Gdpr", true, true) }
              } 
              break; *@
            case "picker":
              @* TODO: @2dg #3
                - fields ValuesDropdownRadio, etc.
                -  *@
              @* if (usePlaceholder) {
                <strong>@label</strong>
              } *@

              @* if (pickerType == "radio") {
                @formBuilder.Field(dynField)
                @FieldBuilder.Radio(fieldId, required, GetKeyValue(field.String("PickerKeyValues")), label)
              } *@
              
              @* if (pickerType == "dropdown") {
                @formBuilder.Field(dynField)
                @FieldBuilder.DropDown(fieldId, GetKeyValue(field.String("ValuesDropdownRadio")), required, field.Bool("MultiSelect"), label, field.String("PickerKeyValues")) 
              } *@

              if (pickerType == "checkbox") {

                if (field.Bool("CheckboxWithHeadline")) {
                  @FieldBuilder.CheckboxListWithLabel(fieldId, required, GetKeyValue(field.String("PickerKeyValues")), label);
                } else {
                  @formBuilder.Field(dynField)
                  @FieldBuilder.CheckboxList(fieldId, required, GetKeyValue(field.String("PickerKeyValues")))
                }
              }
              break;
            
            case "file":
              if(usePlaceholder){
                <strong>@label</strong>
              }
            
              @FieldBuilder.DynFile(fieldId, required, "", label)
              break;

            case "label":
              if(field.Bool("IsSet")) {
                if(setIndex > 1) {
                  
                }

                setIndex++;
              }
              <h4>@label</h4>
              break;
            
            case "hidden":
              if(MyUser.IsContentAdmin) {
                <div class="alert alert-warning" role="alert">
                <strong>Show Hidden Field for Admin</strong>
                  @FieldBuilder.Text(fieldId, label, required, field.String("HiddenValue"), true)
                </div>
              } else {
                @FieldBuilder.Hidden(fieldId, label, field.String("HiddenValue"))
              }
              break;
            
            case "advanced":
              @Html.Partial("./custom-fields/" + @field.String("RazorFile")  , new { field })
              break;
              
            default:
              <p>@pickerType</p>
              <h3>Default: @fieldType</h3>
              break;          
          }
          
        if (hasSets && setIndex > 1) {
          @:</div>
        }
        @:</div> @* toolbar div *@
      }
    </div>

    @if (!dynForm.Bool("SkipSubmit", required: false)) {
      if (formConfig.Bool("Recaptcha")) { @Html.Partial("parts/Footer Recaptcha.cshtml") }
      @Html.Partial("./parts/Footer Submit with Messages.cshtml", new { formConfig })
    }

    @if (MyUser.IsContentAdmin) {
      var query = Kit.Data.GetQuery("DynamicData", parameters: new { ModuleId = MyContext.Module.Id }); // Get the dynamic data from Query by ModuleId
      // Initialize lists to store CSV-related data
      List<(ITyped Json, ITypedItem Item)> dataPairs = dynDataHelper.PrepareData(query.List); // Initialize Data

      <div class="alert alert-warning d-flex align-items-center gap-3" role="alert">
        Admin Info: @dataPairs.Count()
        @if (dataPairs.Count() == 0){
          @App.Resources.String("LabelFromDataAvaible")
        } else {
          <a class="btn btn-primary" href="@Link.To(parameters: "id=" + MyContext.Module.Id + "&mid=" + MyContext.Module.Id)" target="_blank">Form Data</a>
          <a class="btn btn-primary" href="@MyContext.Site.Url/api/2sxc/app/auto/@MyView.Edition/api/Csv/Csv?PageId=@MyContext.Page.Id&ModuleId=@MyContext.Module.Id&id=@MyContext.Module.Id" type="button">CSV Export</a>
        }
      </div>
    }
  </div>
</div>

@Html.Partial("./parts/Assets.cshtml", new { formConfig })

@* Helper function to create a dictionary with keys and values from the string use in Radio and Dropdown *@
@functions {
  Dictionary<string, string> GetKeyValue(string valuesDropdownRadio)
  {
    Dictionary<string, string> valueDictionaryRadio = new Dictionary<string, string>();
    foreach (var item in valuesDropdownRadio.Split('\n'))
    {
      var values = item.Split(':');
      // If values has Key and Value
      if (values.Length == 2)
      {
        string key = values[0].Trim();
        string value = values[1].Trim();
        valueDictionaryRadio[key] = value;
      }
      // If only have a Value
      else if (values.Length == 1)
      {
        string key = values[0];
        string value = values[0];
        valueDictionaryRadio[key] = value;
      }
      else
      {
        string key = "Empty";
        string value = "Empty";
        valueDictionaryRadio[key] = value;
      }
    }
    return valueDictionaryRadio;
  }
}









