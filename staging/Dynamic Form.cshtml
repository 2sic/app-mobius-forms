@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Data
@using ThisApp.Code
@using ThisApp.Data
@{
  var dynForm = MyItem;
  @* TODO:: Rename if dynForm child is solved and is also type *@
  var dynForm2 = new DynForm(MyItem);

  var isReusedConfig = dynForm2.ReuseConfig;
  var useFloatingLabels = isReusedConfig ? dynForm.Child("InheritedConfig").String("DesignField") == "placeholder" : dynForm2.DesignField == "placeholder";
  var formConfig = isReusedConfig ? dynForm.Child("InheritedConfig").Child("Config") : dynForm.Child("Config");
  var formFields = isReusedConfig ? dynForm.Child("InheritedConfig").Children("Fields") : dynForm.Children("Fields");
  var formFieldsSets = formFields.Where(f => f.String("FieldType") == "label" && f.Bool("IsSet"));
  
  var formHelper = new FormHelpers(this);
  var dynDataHelper = GetCode("./tools/DynData.cs");

  // new
  var appRes = new AppResources(App.Resources);
  var dynFormConfig = new DynForm(formConfig);
  var formParams = new FormBuildParameters(appRes, dynFormConfig, Kit.Css.Is("bs3") ? CssClasses.Bs3 : CssClasses.Bs5, MyUser, useFloatingLabels);
  var formBuilder = new FormBuilder(this, formParams);
}

<div @Kit.Toolbar.Default(dynForm) class="app-mobius5-wrapper">

  @if (Text.Has(dynForm.String("Title"))) {
    <h2>@dynForm.String("Title")</h2>   
  }

  <div class="@formHelper.WrapperClasses(formConfig)" @formHelper.FormMobiusId()>
    <div class="app-mobius5-form">
      <input type="hidden" id="FormId" value="@dynForm.Id">

      @foreach (var field in formFields) {
        var dynField = new DynFormField(field);
        
        var toolbar = isReusedConfig
          ? Kit.Toolbar.Empty().Info(tweak: b => b.Note(appRes.ToolbarReuseInfo, background: "white"))
          : Kit.Toolbar.Empty(field).Edit(tweak: b => b.Note("Field: " + dynField.Title)).MoveDown().New().Remove();

        <div class="@dynField.FieldType" @toolbar>

          @if(dynField.FieldType == "advanced" )  
            @Html.Partial("./custom-fields/" + @dynField.RazorFile  , new { field }) // Open Razor File
           else  
            @formBuilder.Field(dynField)
    
        </div> 
      }
    </div>

    @if (!dynForm.Bool("SkipSubmit", required: false)) {
      if (formConfig.Bool("Recaptcha")) { @Html.Partial("parts/Footer Recaptcha.cshtml") }
      @Html.Partial("./parts/Footer Submit with Messages.cshtml", new { formConfig })
    }

    @if (MyUser.IsContentAdmin) {
      var query = Kit.Data.GetQuery("DynamicData", parameters: new { ModuleId = MyContext.Module.Id }); // Get the dynamic data from Query by ModuleId
      // Initialize lists to store CSV-related data
      List<(ITyped Json, ITypedItem Item)> dataPairs = dynDataHelper.PrepareData(query.List); // Initialize Data

      <div class="alert alert-warning d-flex align-items-center gap-3" role="alert">
        Admin Info: @dataPairs.Count()
        @if (dataPairs.Count() == 0){
          @appRes.LabelFromDataAvaible
        } else {
          <a class="btn btn-primary" href="@Link.To(parameters: "id=" + MyContext.Module.Id + "&mid=" + MyContext.Module.Id)" target="_blank">Form Data</a>
          <a class="btn btn-primary" href="@MyContext.Site.Url/api/2sxc/app/auto/@MyView.Edition/api/Csv/Csv?PageId=@MyContext.Page.Id&ModuleId=@MyContext.Module.Id&id=@MyContext.Module.Id" type="button">CSV Export</a>
        }
      </div>
    }
  </div>
</div>

@Html.Partial("./parts/Assets.cshtml", new { formConfig })