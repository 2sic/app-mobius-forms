// ----------------------- file: FormConfig.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormConfig.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class FormConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
using System.Collections.Generic;
using ToSic.Sxc.Data;
using ToSic.Sxc.Adam;
using System;

namespace ThisApp.Data
{
  // This is a generated class for FormConfig
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormConfig data object <br>
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.DesignField`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class FormConfig: FormConfigAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for FormConfig.</summary>
  public abstract class FormConfigAutoGenerated: Custom.Data.Item16
  {
    /// <summary>DesignField as string. For advanced manipulation like scrubHtml, use .String("DesignField", ...)</summary>
    public string DesignField => String("DesignField", fallback: "");

    /// <summary>Fields as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> Fields => Children("Fields");

    /// <summary>FormResources as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> FormResources => Children("FormResources");

    /// <summary>FormSendMailConfig as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> FormSendMailConfig => Children("FormSendMailConfig");

    /// <summary>InheritedConfig as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> InheritedConfig => Children("InheritedConfig");

    /// <summary>
    /// Get the bool of Mailchimp.
    /// To get nullable use .Get("Mailchimp") as bool?;
    /// </summary>
    public bool Mailchimp => Bool("Mailchimp");

    /// <summary>
    /// Get the bool of PublishForReuse.
    /// To get nullable use .Get("PublishForReuse") as bool?;
    /// </summary>
    public bool PublishForReuse => Bool("PublishForReuse");

    /// <summary>PublishTitle as string. For advanced manipulation like scrubHtml, use .String("PublishTitle", ...)</summary>
    public string PublishTitle => String("PublishTitle", fallback: "");

    /// <summary>
    /// Get the bool of Recaptcha.
    /// To get nullable use .Get("Recaptcha") as bool?;
    /// </summary>
    public bool Recaptcha => Bool("Recaptcha");

    /// <summary>
    /// Get the bool of ReuseConfig.
    /// To get nullable use .Get("ReuseConfig") as bool?;
    /// </summary>
    public bool ReuseConfig => Bool("ReuseConfig");

    /// <summary>SaveToContentType as string. For advanced manipulation like scrubHtml, use .String("SaveToContentType", ...)</summary>
    public string SaveToContentType => String("SaveToContentType", fallback: "");

    /// <summary>
    /// Get the bool of ShowRecaptchaIcon.
    /// To get nullable use .Get("ShowRecaptchaIcon") as bool?;
    /// </summary>
    public bool ShowRecaptchaIcon => Bool("ShowRecaptchaIcon");

    /// <summary>Title as string. For advanced manipulation like scrubHtml, use .String("Title", ...)</summary>
    public string Title => String("Title", fallback: "");

    /// <summary>TitleInternal as string. For advanced manipulation like scrubHtml, use .String("TitleInternal", ...)</summary>
    public string TitleInternal => String("TitleInternal", fallback: "");
  }
}


// ----------------------- file: FormData.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormData.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class FormData
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z

namespace ThisApp.Data
{
  // This is a generated class for FormData
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormData data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.Files`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class FormData: FormDataAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for FormData.</summary>
  public abstract class FormDataAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// Get the link on Files.
    /// To get the underlying value like 'file:72' use String("Files")
    /// </summary>
    public string Files => Url("Files");

    /// <summary>Get the file object for Files - or null if it's empty or not referencing a file.</summary>
    public IFile FilesFile => File("FilesFile");

    /// <summary>Get the folder object for Files.</summary>
    public IFolder FilesFolder => Folder("FilesFolder");

    /// <summary>FormId as string. For advanced manipulation like scrubHtml, use .String("FormId", ...)</summary>
    public string FormId => String("FormId", fallback: "");

    /// <summary>
    /// Get the int of ModuleId.
    /// To get other types use methods such as .Decimal("ModuleId")
    /// </summary>
    public int ModuleId => Int("ModuleId");

    /// <summary>RawData as string. For advanced manipulation like scrubHtml, use .String("RawData", ...)</summary>
    public string RawData => String("RawData", fallback: "");

    /// <summary>SenderIP as string. For advanced manipulation like scrubHtml, use .String("SenderIP", ...)</summary>
    public string SenderIP => String("SenderIP", fallback: "");

    /// <summary>Get the DateTime of Timestamp.</summary>
    public DateTime Timestamp => DateTime("Timestamp");

    /// <summary>Title as string. For advanced manipulation like scrubHtml, use .String("Title", ...)</summary>
    public string Title => String("Title", fallback: "");
  }
}


// ----------------------- file: FormFieldConfig.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormFieldConfig.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class FormFieldConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for FormFieldConfig
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormFieldConfig data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.BooleanLabelRight`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class FormFieldConfig: FormFieldConfigAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for FormFieldConfig.</summary>
  public abstract class FormFieldConfigAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// Get the bool of BooleanLabelRight.
    /// To get nullable use .Get("BooleanLabelRight") as bool?;
    /// </summary>
    public bool BooleanLabelRight => Bool("BooleanLabelRight");

    /// <summary>DefaultValue as string. For advanced manipulation like scrubHtml, use .String("DefaultValue", ...)</summary>
    public string DefaultValue => String("DefaultValue", fallback: "");

    /// <summary>
    /// Get the bool of EmailUseAsRecipient.
    /// To get nullable use .Get("EmailUseAsRecipient") as bool?;
    /// </summary>
    public bool EmailUseAsRecipient => Bool("EmailUseAsRecipient");

    /// <summary>FieldId as string. For advanced manipulation like scrubHtml, use .String("FieldId", ...)</summary>
    public string FieldId => String("FieldId", fallback: "");

    /// <summary>FieldType as string. For advanced manipulation like scrubHtml, use .String("FieldType", ...)</summary>
    public string FieldType => String("FieldType", fallback: "");

    /// <summary>
    /// Get the bool of GdprEnabled.
    /// To get nullable use .Get("GdprEnabled") as bool?;
    /// </summary>
    public bool GdprEnabled => Bool("GdprEnabled");

    /// <summary>
    /// Get the bool of IsDisabled.
    /// To get nullable use .Get("IsDisabled") as bool?;
    /// </summary>
    public bool IsDisabled => Bool("IsDisabled");

    /// <summary>
    /// Get the bool of LabelStartsNewGroup.
    /// To get nullable use .Get("LabelStartsNewGroup") as bool?;
    /// </summary>
    public bool LabelStartsNewGroup => Bool("LabelStartsNewGroup");

    /// <summary>
    /// Get the int of NumberMax.
    /// To get other types use methods such as .Decimal("NumberMax")
    /// </summary>
    public int NumberMax => Int("NumberMax");

    /// <summary>
    /// Get the int of NumberMin.
    /// To get other types use methods such as .Decimal("NumberMin")
    /// </summary>
    public int NumberMin => Int("NumberMin");

    /// <summary>
    /// Get the bool of PickerCheckboxGrouped.
    /// To get nullable use .Get("PickerCheckboxGrouped") as bool?;
    /// </summary>
    public bool PickerCheckboxGrouped => Bool("PickerCheckboxGrouped");

    /// <summary>PickerKeyValues as string. For advanced manipulation like scrubHtml, use .String("PickerKeyValues", ...)</summary>
    public string PickerKeyValues => String("PickerKeyValues", fallback: "");

    /// <summary>
    /// Get the bool of PickerMultiSelect.
    /// To get nullable use .Get("PickerMultiSelect") as bool?;
    /// </summary>
    public bool PickerMultiSelect => Bool("PickerMultiSelect");

    /// <summary>PickerPlaceholder as string. For advanced manipulation like scrubHtml, use .String("PickerPlaceholder", ...)</summary>
    public string PickerPlaceholder => String("PickerPlaceholder", fallback: "");

    /// <summary>PickerType as string. For advanced manipulation like scrubHtml, use .String("PickerType", ...)</summary>
    public string PickerType => String("PickerType", fallback: "");

    /// <summary>RazorFile as string. For advanced manipulation like scrubHtml, use .String("RazorFile", ...)</summary>
    public string RazorFile => String("RazorFile", fallback: "");

    /// <summary>
    /// Get the bool of Required.
    /// To get nullable use .Get("Required") as bool?;
    /// </summary>
    public bool Required => Bool("Required");

    /// <summary>
    /// Get the int of StringLines.
    /// To get other types use methods such as .Decimal("StringLines")
    /// </summary>
    public int StringLines => Int("StringLines");

    /// <summary>
    /// Get the bool of TermsAndGdprCombined.
    /// To get nullable use .Get("TermsAndGdprCombined") as bool?;
    /// </summary>
    public bool TermsAndGdprCombined => Bool("TermsAndGdprCombined");

    /// <summary>
    /// Get the bool of TermsEnabled.
    /// To get nullable use .Get("TermsEnabled") as bool?;
    /// </summary>
    public bool TermsEnabled => Bool("TermsEnabled");

    /// <summary>Title as string. For advanced manipulation like scrubHtml, use .String("Title", ...)</summary>
    public string Title => String("Title", fallback: "");
  }
}


// ----------------------- file: FormResources.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormResources.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class FormResources
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for FormResources
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormResources data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.Button`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class FormResources: FormResourcesAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for FormResources.</summary>
  public abstract class FormResourcesAutoGenerated: Custom.Data.Item16
  {
    /// <summary>Button as string. For advanced manipulation like scrubHtml, use .String("Button", ...)</summary>
    public string Button => String("Button", fallback: "");

    /// <summary>ButtonNextStep as string. For advanced manipulation like scrubHtml, use .String("ButtonNextStep", ...)</summary>
    public string ButtonNextStep => String("ButtonNextStep", fallback: "");

    /// <summary>CustomerMailSubject as string. For advanced manipulation like scrubHtml, use .String("CustomerMailSubject", ...)</summary>
    public string CustomerMailSubject => String("CustomerMailSubject", fallback: "");

    /// <summary>LabelGdpr as string. For advanced manipulation like scrubHtml, use .String("LabelGdpr", ...)</summary>
    public string LabelGdpr => String("LabelGdpr", fallback: "");

    /// <summary>LabelRequired as string. For advanced manipulation like scrubHtml, use .String("LabelRequired", ...)</summary>
    public string LabelRequired => String("LabelRequired", fallback: "");

    /// <summary>LabelSelect as string. For advanced manipulation like scrubHtml, use .String("LabelSelect", ...)</summary>
    public string LabelSelect => String("LabelSelect", fallback: "");

    /// <summary>LabelTerms as string. For advanced manipulation like scrubHtml, use .String("LabelTerms", ...)</summary>
    public string LabelTerms => String("LabelTerms", fallback: "");

    /// <summary>LabelTermsAll as string. For advanced manipulation like scrubHtml, use .String("LabelTermsAll", ...)</summary>
    public string LabelTermsAll => String("LabelTermsAll", fallback: "");

    /// <summary>LabelValidEmail as string. For advanced manipulation like scrubHtml, use .String("LabelValidEmail", ...)</summary>
    public string LabelValidEmail => String("LabelValidEmail", fallback: "");

    /// <summary>LabelValidFile as string. For advanced manipulation like scrubHtml, use .String("LabelValidFile", ...)</summary>
    public string LabelValidFile => String("LabelValidFile", fallback: "");

    /// <summary>MailBodyCustomer as string. For advanced manipulation like scrubHtml, use .String("MailBodyCustomer", ...)</summary>
    public string MailBodyCustomer => String("MailBodyCustomer", fallback: "");

    /// <summary>MailBodyOwner as string. For advanced manipulation like scrubHtml, use .String("MailBodyOwner", ...)</summary>
    public string MailBodyOwner => String("MailBodyOwner", fallback: "");

    /// <summary>MailCustomerContentWithData as string. For advanced manipulation like scrubHtml, use .String("MailCustomerContentWithData", ...)</summary>
    public string MailCustomerContentWithData => String("MailCustomerContentWithData", fallback: "");

    /// <summary>MessageCustomerMailSend as string. For advanced manipulation like scrubHtml, use .String("MessageCustomerMailSend", ...)</summary>
    public string MessageCustomerMailSend => String("MessageCustomerMailSend", fallback: "");

    /// <summary>MessageDisabledFeature as string. For advanced manipulation like scrubHtml, use .String("MessageDisabledFeature", ...)</summary>
    public string MessageDisabledFeature => String("MessageDisabledFeature", fallback: "");

    /// <summary>MessageFormIncomplete as string. For advanced manipulation like scrubHtml, use .String("MessageFormIncomplete", ...)</summary>
    public string MessageFormIncomplete => String("MessageFormIncomplete", fallback: "");

    /// <summary>MessageMailFromError as string. For advanced manipulation like scrubHtml, use .String("MessageMailFromError", ...)</summary>
    public string MessageMailFromError => String("MessageMailFromError", fallback: "");

    /// <summary>MessageMailOwnerError as string. For advanced manipulation like scrubHtml, use .String("MessageMailOwnerError", ...)</summary>
    public string MessageMailOwnerError => String("MessageMailOwnerError", fallback: "");

    /// <summary>MessageNewsletterSuccess as string. For advanced manipulation like scrubHtml, use .String("MessageNewsletterSuccess", ...)</summary>
    public string MessageNewsletterSuccess => String("MessageNewsletterSuccess", fallback: "");

    /// <summary>MessageNewsletterUnexpectedError as string. For advanced manipulation like scrubHtml, use .String("MessageNewsletterUnexpectedError", ...)</summary>
    public string MessageNewsletterUnexpectedError => String("MessageNewsletterUnexpectedError", fallback: "");

    /// <summary>MessageSendError as string. For advanced manipulation like scrubHtml, use .String("MessageSendError", ...)</summary>
    public string MessageSendError => String("MessageSendError", fallback: "");

    /// <summary>MessageSending as string. For advanced manipulation like scrubHtml, use .String("MessageSending", ...)</summary>
    public string MessageSending => String("MessageSending", fallback: "");

    /// <summary>MessageSendOk as string. For advanced manipulation like scrubHtml, use .String("MessageSendOk", ...)</summary>
    public string MessageSendOk => String("MessageSendOk", fallback: "");

    /// <summary>OwnerMailSubject as string. For advanced manipulation like scrubHtml, use .String("OwnerMailSubject", ...)</summary>
    public string OwnerMailSubject => String("OwnerMailSubject", fallback: "");

    /// <summary>Title as string. For advanced manipulation like scrubHtml, use .String("Title", ...)</summary>
    public string Title => String("Title", fallback: "");
  }
}


// ----------------------- file: FormSendMailConfig.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "FormSendMailConfig.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class FormSendMailConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for FormSendMailConfig
  // To extend/modify it, see instructions above.

  /// <summary>
  /// FormSendMailConfig data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.CustomerMailCC`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class FormSendMailConfig: FormSendMailConfigAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for FormSendMailConfig.</summary>
  public abstract class FormSendMailConfigAutoGenerated: Custom.Data.Item16
  {
    /// <summary>CustomerMailCC as string. For advanced manipulation like scrubHtml, use .String("CustomerMailCC", ...)</summary>
    public string CustomerMailCC => String("CustomerMailCC", fallback: "");

    /// <summary>CustomerMailTemplate as string. For advanced manipulation like scrubHtml, use .String("CustomerMailTemplate", ...)</summary>
    public string CustomerMailTemplate => String("CustomerMailTemplate", fallback: "");

    /// <summary>
    /// Get the bool of CustomerSend.
    /// To get nullable use .Get("CustomerSend") as bool?;
    /// </summary>
    public bool CustomerSend => Bool("CustomerSend");

    /// <summary>MailFrom as string. For advanced manipulation like scrubHtml, use .String("MailFrom", ...)</summary>
    public string MailFrom => String("MailFrom", fallback: "");

    /// <summary>Name as string. For advanced manipulation like scrubHtml, use .String("Name", ...)</summary>
    public string Name => String("Name", fallback: "");

    /// <summary>OwnerMail as string. For advanced manipulation like scrubHtml, use .String("OwnerMail", ...)</summary>
    public string OwnerMail => String("OwnerMail", fallback: "");

    /// <summary>OwnerMailCC as string. For advanced manipulation like scrubHtml, use .String("OwnerMailCC", ...)</summary>
    public string OwnerMailCC => String("OwnerMailCC", fallback: "");

    /// <summary>OwnerMailTemplate as string. For advanced manipulation like scrubHtml, use .String("OwnerMailTemplate", ...)</summary>
    public string OwnerMailTemplate => String("OwnerMailTemplate", fallback: "");

    /// <summary>
    /// Get the bool of OwnerSend.
    /// To get nullable use .Get("OwnerSend") as bool?;
    /// </summary>
    public bool OwnerSend => Bool("OwnerSend");
  }
}


// ----------------------- file: Newsletter.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "Newsletter.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class Newsletter
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for Newsletter
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Newsletter data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.Email`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class Newsletter: NewsletterAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for Newsletter.</summary>
  public abstract class NewsletterAutoGenerated: Custom.Data.Item16
  {
    /// <summary>Email as string. For advanced manipulation like scrubHtml, use .String("Email", ...)</summary>
    public string Email => String("Email", fallback: "");

    /// <summary>Name as string. For advanced manipulation like scrubHtml, use .String("Name", ...)</summary>
    public string Name => String("Name", fallback: "");
  }
}


// ----------------------- file: AppResources.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "AppResources.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class AppResources
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for AppResources
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppResources data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.DefaultFormResources`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class AppResources: AppResourcesAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for AppResources.</summary>
  public abstract class AppResourcesAutoGenerated: Custom.Data.Item16
  {
    /// <summary>DefaultFormResources as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> DefaultFormResources => Children("DefaultFormResources");

    /// <summary>DefaultSendMailConfig as list of ITypedItem.</summary>
    public IEnumerable<ITypedItem> DefaultSendMailConfig => Children("DefaultSendMailConfig");

    /// <summary>LabelFirst as string. For advanced manipulation like scrubHtml, use .String("LabelFirst", ...)</summary>
    public string LabelFirst => String("LabelFirst", fallback: "");

    /// <summary>LabelFromDataAvailable as string. For advanced manipulation like scrubHtml, use .String("LabelFromDataAvailable", ...)</summary>
    public string LabelFromDataAvailable => String("LabelFromDataAvailable", fallback: "");

    /// <summary>LabelLast as string. For advanced manipulation like scrubHtml, use .String("LabelLast", ...)</summary>
    public string LabelLast => String("LabelLast", fallback: "");

    /// <summary>LabelRecaptcha as string. For advanced manipulation like scrubHtml, use .String("LabelRecaptcha", ...)</summary>
    public string LabelRecaptcha => String("LabelRecaptcha", fallback: "");

    /// <summary>LabelTimestamp as string. For advanced manipulation like scrubHtml, use .String("LabelTimestamp", ...)</summary>
    public string LabelTimestamp => String("LabelTimestamp", fallback: "");

    /// <summary>MessageContainsMailChimp as string. For advanced manipulation like scrubHtml, use .String("MessageContainsMailChimp", ...)</summary>
    public string MessageContainsMailChimp => String("MessageContainsMailChimp", fallback: "");

    /// <summary>MessageContainsRecaptcha as string. For advanced manipulation like scrubHtml, use .String("MessageContainsRecaptcha", ...)</summary>
    public string MessageContainsRecaptcha => String("MessageContainsRecaptcha", fallback: "");

    /// <summary>MessageDefaultMailChimpKey as string. For advanced manipulation like scrubHtml, use .String("MessageDefaultMailChimpKey", ...)</summary>
    public string MessageDefaultMailChimpKey => String("MessageDefaultMailChimpKey", fallback: "");

    /// <summary>MessageDemoItem as string. For advanced manipulation like scrubHtml, use .String("MessageDemoItem", ...)</summary>
    public string MessageDemoItem => String("MessageDemoItem", fallback: "");

    /// <summary>MessageEnableMailchimp as string. For advanced manipulation like scrubHtml, use .String("MessageEnableMailchimp", ...)</summary>
    public string MessageEnableMailchimp => String("MessageEnableMailchimp", fallback: "");

    /// <summary>MessageRecaptchaMissing as string. For advanced manipulation like scrubHtml, use .String("MessageRecaptchaMissing", ...)</summary>
    public string MessageRecaptchaMissing => String("MessageRecaptchaMissing", fallback: "");

    /// <summary>MessageRecaptchaWarning as string. For advanced manipulation like scrubHtml, use .String("MessageRecaptchaWarning", ...)</summary>
    public string MessageRecaptchaWarning => String("MessageRecaptchaWarning", fallback: "");

    /// <summary>NoFieldsInfo as string. For advanced manipulation like scrubHtml, use .String("NoFieldsInfo", ...)</summary>
    public string NoFieldsInfo => String("NoFieldsInfo", fallback: "");

    /// <summary>ToolbarAppResources as string. For advanced manipulation like scrubHtml, use .String("ToolbarAppResources", ...)</summary>
    public string ToolbarAppResources => String("ToolbarAppResources", fallback: "");

    /// <summary>ToolbarConfigure as string. For advanced manipulation like scrubHtml, use .String("ToolbarConfigure", ...)</summary>
    public string ToolbarConfigure => String("ToolbarConfigure", fallback: "");

    /// <summary>ToolbarPermissionInfo as string. For advanced manipulation like scrubHtml, use .String("ToolbarPermissionInfo", ...)</summary>
    public string ToolbarPermissionInfo => String("ToolbarPermissionInfo", fallback: "");

    /// <summary>ToolbarReuseInfo as string. For advanced manipulation like scrubHtml, use .String("ToolbarReuseInfo", ...)</summary>
    public string ToolbarReuseInfo => String("ToolbarReuseInfo", fallback: "");

    /// <summary>ToolbarViewData as string. For advanced manipulation like scrubHtml, use .String("ToolbarViewData", ...)</summary>
    public string ToolbarViewData => String("ToolbarViewData", fallback: "");
  }
}


// ----------------------- file: AppSettings.cs ----------------------- 
// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/hotbuild-autogen
// To extend it, create a "AppSettings.cs" with this contents:
/*
namespace ThisApp.Data
{
  public partial class AppSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator: DataModelGenerator v17.01.08
// User:      2sic Web-Developer
// Edition:   /staging
// When:      2024-02-15 17:51:20Z
namespace ThisApp.Data
{
  // This is a generated class for AppSettings
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppSettings data object
  /// 
  /// Default properties such as `.Title` or `.Id` are provided in the base class.
  /// Most properties have a simple access, such as `.AdminHasPermission`.
  /// For other properties or uses, the common method such as
  /// `IsNotEmpty("FieldName")`, `String("FieldName")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used.
  /// 
  /// Generated 2024-02-15 17:51:20Z - if you change the content type, remember to re-generate.
  /// </summary>
  public partial class AppSettings: AppSettingsAutoGenerated
  {  }

  /// <summary>Auto-Generated base class for AppSettings.</summary>
  public abstract class AppSettingsAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// Get the bool of AdminHasPermission.
    /// To get nullable use .Get("AdminHasPermission") as bool?;
    /// </summary>
    public bool AdminHasPermission => Bool("AdminHasPermission");

    /// <summary>DefaultMailFrom as string. For advanced manipulation like scrubHtml, use .String("DefaultMailFrom", ...)</summary>
    public string DefaultMailFrom => String("DefaultMailFrom", fallback: "");

    /// <summary>DefaultOwnerMail as string. For advanced manipulation like scrubHtml, use .String("DefaultOwnerMail", ...)</summary>
    public string DefaultOwnerMail => String("DefaultOwnerMail", fallback: "");

    /// <summary>
    /// Get the bool of GdprEnabled.
    /// To get nullable use .Get("GdprEnabled") as bool?;
    /// </summary>
    public bool GdprEnabled => Bool("GdprEnabled");

    /// <summary>MailchimpAPIKey as string. For advanced manipulation like scrubHtml, use .String("MailchimpAPIKey", ...)</summary>
    public string MailchimpAPIKey => String("MailchimpAPIKey", fallback: "");

    /// <summary>MailchimpListId as string. For advanced manipulation like scrubHtml, use .String("MailchimpListId", ...)</summary>
    public string MailchimpListId => String("MailchimpListId", fallback: "");

    /// <summary>MailchimpServer as string. For advanced manipulation like scrubHtml, use .String("MailchimpServer", ...)</summary>
    public string MailchimpServer => String("MailchimpServer", fallback: "");

    /// <summary>
    /// Get the bool of MailChimpShowWarning.
    /// To get nullable use .Get("MailChimpShowWarning") as bool?;
    /// </summary>
    public bool MailChimpShowWarning => Bool("MailChimpShowWarning");

    /// <summary>
    /// Get the bool of TermsAndGdprCombined.
    /// To get nullable use .Get("TermsAndGdprCombined") as bool?;
    /// </summary>
    public bool TermsAndGdprCombined => Bool("TermsAndGdprCombined");

    /// <summary>
    /// Get the bool of TermsEnabled.
    /// To get nullable use .Get("TermsEnabled") as bool?;
    /// </summary>
    public bool TermsEnabled => Bool("TermsEnabled");
  }
}